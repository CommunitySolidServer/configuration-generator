(()=>{"use strict";var e={824:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ENABLED_DISABLED=t.FALSE=t.TRUE=void 0,t.TRUE="true",t.FALSE="false",t.ENABLED_DISABLED=[{value:t.TRUE,label:"Enabled"},{value:t.FALSE,label:"Disabled"}]},283:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CHOICES=void 0;const r=o(150),i=o(180),a=o(271),s=o(104),n=o(629),l=o(987),d=o(327),u=o(551),c=o(30),p=o(113),m=o(483),h=o(612);t.CHOICES=[l.INTERNAL,i.BACKEND,d.LOCKING,c.REGISTRATION,h.WEBSOCKETS,s.HTTPS,a.EMAIL,r.AUTHORIZATION,m.SUBDOMAIN,n.INITIALIZE_ROOT,p.SETUP,u.OWNERSHIP]},150:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AUTHORIZATION=void 0;const r=o(824);t.AUTHORIZATION={name:"authorization",title:"Authorization",description:"The authorization system to restrict who can access resources.\n  Disabling this allows everyone to access and modify all resources on the server.",options:[{value:"wac",label:"Web Access Control"},{value:r.FALSE,label:"Disabled"}],default:r.FALSE}},180:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BACKEND=void 0,t.BACKEND={name:"backend",title:"Data storage",description:"How the data should be stored on the server.\n  In-memory will cause the data to be lost when the server restarts.\n  SPARQL options requires the <code>--sparqlEndpoint</code> CLI parameter to be set.",options:[{value:"memory",label:"In-memory"},{value:"file",label:"File system"},{value:"sparql",label:"SPARQL endpoint (requires in-memory internal storage)"},{value:"pod-quota-file",label:"File system (with a pod quota)"},{value:"regex",label:"SPARQL endpoint (using file system for internal data)"}],default:"file"}},271:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EMAIL=void 0;const r=o(824);t.EMAIL={name:"email",title:"E-mail server",description:"Configure an e-mail server to be used when users forgot their password.\n  This will add a new entry to the configuration JSON that needs to be updated with the credentials of your e-mail server.",options:r.ENABLED_DISABLED,default:r.FALSE}},104:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTTPS=void 0;const r=o(824);t.HTTPS={name:"https",title:"HTTPS",description:"Determines if the server should be started for HTTP or HTTPS.\n  If HTTPS is chosen, CLI parameters <code>--httpsKey</code> and <code>--httpsCert</code> need to be provided.",options:r.ENABLED_DISABLED,default:r.FALSE}},629:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INITIALIZE_ROOT=void 0;const r=o(824);t.INITIALIZE_ROOT={name:"initializeRoot",title:"Initialize root",description:"Marks the root of the server as a storage and writes the necessary authorization resources so it can be accessed.\n  This allows everyone to edit the data on the server so make sure to update those to have the correct values.",options:r.ENABLED_DISABLED,default:r.FALSE}},987:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INTERNAL=void 0,t.INTERNAL={name:"internal",title:"Internal storage",description:"How internal data should be stored, such as account data.\n  Data stored in memory will be lost on server restart.",options:[{value:"memory",label:"In-memory"},{value:"resource-store",label:"Same as data storage (see below)"}],default:"resource-store"}},327:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LOCKING=void 0;const r=o(824);t.LOCKING={name:"locking",title:"Locking",description:"Which system to use to create locks.\n  Locks are used to prevent simultaneous write operations on the same resource.\n  Disabling this can cause data corruption.\n  In-memory locking is insufficient if multiple workers threads are used.",options:[{value:"memory",label:"In-memory"},{value:"file",label:"File system"},{value:"redis",label:"Redis"},{value:r.FALSE,label:"Disabled"}],default:"file"}},551:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OWNERSHIP=void 0;const r=o(824);t.OWNERSHIP={name:"ownership",title:"Ownership verification",description:"Verifies that someone is the owner of an external WebID if they try to register an account with it.\n  Disabling this means this server should not be trusted for authentication.",options:r.ENABLED_DISABLED,default:r.TRUE}},30:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.REGISTRATION=void 0;const r=o(824);t.REGISTRATION={name:"registration",title:"Registration",description:"Allow users to register new accounts and pods on the server.",options:r.ENABLED_DISABLED,default:r.TRUE}},113:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SETUP=void 0;const r=o(824);t.SETUP={name:"setup",title:"Setup",description:"Requires a setup procedure to occur after starting the server. \n  This can be used to create a pod immediately on the server.",options:r.ENABLED_DISABLED,default:r.FALSE}},483:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SUBDOMAIN=void 0;const r=o(824);t.SUBDOMAIN={name:"subdomain",title:"Pod URLs",description:"How URLs for new pods should be created, appending the name to the base URL as a suffix, or using it as a subdomain.",options:[{value:r.FALSE,label:"Suffix (<code>https://example.com/test/</code>)"},{value:r.TRUE,label:"Subdomain (<code>https://test.example.com/</code>)"}],default:r.FALSE}},612:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WEBSOCKETS=void 0;const r=o(824);t.WEBSOCKETS={name:"webSockets",title:"WebSockets",description:"Adds support for the deprecated Solid WebSockets API 0.1.\n  This allows users to be notified when resources change, without requiring authentication.",options:r.ENABLED_DISABLED,default:r.FALSE}},618:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateBody=void 0;const r=o(824);function i(e,t,o,r){return{comment:o,"@type":"Override",overrideInstance:{"@id":e},overrideParameters:Object.assign({"@type":t},r)}}t.generateBody=function(e){const t=[];if(e.email===r.TRUE){const e="The settings of your email server.",o={senderName:"Community Solid Server <solid@example.email>",emailConfig_host:"smtp.example.email",emailConfig_port:587,emailConfig_auth_user:"solid@example.email",emailConfig_auth_pass:"NYEaCsqV7aVStRCbmC"};t.push(i("urn:solid-server:default:EmailSender","BaseEmailSender",e,o))}if("regex"===e.backend){const e="Overrides the default rule to make sure internal data is stored on the file system.",o={rules:[{comment:"Stores internal data in the file system","@type":"RegexRule",regex:"^/\\.internal/",store:{"@id":"urn:solid-server:default:FileResourceStore"}},{comment:"Send everything else to the SPARQL store.","@type":"RegexRule",regex:".*",store:{"@id":"urn:solid-server:default:SparqlResourceStore"}}]};t.push(i("urn:solid-server:default:RouterRule","RegexRouterRule",e,o))}if("pod-quota-file"===e.backend){const e="Sets the maximum pod size to the given values.",o={limit_amount:"7000",limit_unit:"bytes"};t.push(i("urn:solid-server:default:QuotaStrategy","PodQuotaStrategy",e,o));const r="Ignores internal data when calculating size.",a={ignoreFolders:["^/\\.internal$"]};t.push(i("urn:solid-server:default:SizeReporter","FileSizeReporter",r,a))}return t}},297:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateConfig=t.CONTEXT=void 0;const r=o(283),i=o(618),a=o(711);t.CONTEXT="https://linkedsoftwaredependencies.org/bundles/npm/@solid/community-server/^5.0.0/components/context.jsonld",t.generateConfig=function(e){const o=function(e){var t;const o={};for(const i of r.CHOICES)o[i.name]=null!==(t=e[i.name])&&void 0!==t?t:i.default;return o}(e),s=(0,a.generateImports)(o).sort(),n=(0,i.generateBody)(o);return{"@context":t.CONTEXT,import:s,"@graph":n}}},711:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateImports=t.DEFAULT_IMPORTS=t.generateImport=void 0;const r=o(824);function i(e,t,o){return`css:config/${e}/${t}/${o}.json`}t.generateImport=i,t.DEFAULT_IMPORTS=[i("app","main","default"),i("app","variables","default"),i("http","handler","default"),i("http","static","default"),i("identity","access","public"),i("identity","handler","default"),i("identity","pod","static"),i("ldp","authentication","dpop-bearer"),i("ldp","handler","default"),i("ldp","metadata-parser","default"),i("ldp","metadata-writer","default"),i("ldp","modes","default"),i("storage","middleware","default"),i("util","index","default"),i("util","logging","winston"),i("util","representation-conversion","default"),i("util","variables","default")],t.generateImports=function(e){const o=[...t.DEFAULT_IMPORTS];if("sparql"===e.backend&&"resource-store"===e.internal)throw new Error("SPARQL backend can not be chosen if the backend is used for internal storage.");if("regex"===e.backend&&"memory"===e.internal)throw new Error("Combining the regex backend with in-memory internal storage does not make sense.");if(e.registration===r.FALSE&&e.setup===r.FALSE&&e.initializeRoot===r.FALSE)throw new Error("There would be no way to write data to this server.");if(e.registration===r.TRUE&&e.initializeRoot===r.TRUE&&e.subdomain===r.FALSE)throw new Error("Initializing the root and enabling registration would cause the server to have nested storages, which is not allowed.");var a,s;return o.push(i("app","init",e.initializeRoot===r.TRUE?"initialize-root":"default")),o.push(i("app","setup",e.setup===r.TRUE?"required":"disabled")),o.push(i("http","middleware",e.webSockets===r.TRUE?"websockets":"no-websockets")),o.push((a=e.webSockets===r.TRUE,s=e.https===r.TRUE,i("http","server-factory",a?s?"https-websockets":"websockets":s?"https-no-websockets":"no-websockets"))),o.push(i("identity","email",e.email===r.TRUE?"example":"default")),o.push(i("identity","ownership",e.ownership===r.TRUE?"token":"unsafe-no-check")),o.push(i("identity","registration",e.registration===r.TRUE?"enabled":"disabled")),o.push(i("ldp","authorization","wac"===e.authorization?"webacl":"allow-all")),o.push(i("util","auxiliary","wac"===e.authorization?"acl":"no-acl")),o.push(i("storage","backend",e.backend)),o.push(i("storage","key-value",e.internal)),o.push(i("util","identifiers",e.subdomain===r.TRUE?"subdomain":"suffix")),o.push(i("util","resource-locker",e.locking===r.FALSE?"debug-void":e.locking)),o}}},t={};function o(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,o),a.exports}(()=>{const e=o(297),t=document.getElementById("form");function r(){const o=new FormData(t),r=Object.fromEntries(o),i=document.getElementById("text");try{const t=(0,e.generateConfig)(r);i.innerText=JSON.stringify(t,null,2)}catch(e){i.innerText=`Error: ${e.message}`}}r();const i=t.getElementsByTagName("input");for(const e of i)e.addEventListener("click",r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,