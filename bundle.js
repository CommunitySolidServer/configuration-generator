(()=>{"use strict";var e={824:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ENABLED_DISABLED=t.FALSE=t.TRUE=void 0,t.TRUE="true",t.FALSE="false",t.ENABLED_DISABLED=[{key:t.TRUE,label:"Enabled"},{key:t.FALSE,label:"Disabled"}]},150:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AUTHORIZATION=void 0;const r=o(824);t.AUTHORIZATION={title:"Authorization",description:"The authorization system to restrict who can access resources.\n  Disabling this allows everyone to access and modify all resources on the server.",options:[{key:"wac",label:"Web Access Control"},{key:r.FALSE,label:"Disabled"}],default:r.FALSE}},180:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BACKEND=void 0,t.BACKEND={title:"E-mail server",description:"How the data should be stored on the server.\n  In-memory will cause the data to be lost when the server restarts.\n  SPARQL options requires the <code>--sparqlEndpoint</code> CLI parameter to be set.",options:[{key:"memory",label:"In-memory"},{key:"file",label:"File system"},{key:"sparql",label:"SPARQL endpoint (requires in-memory internal storage)"},{key:"pod-quota-file",label:"File system (with a pod quota)"},{key:"regex",label:"SPARQL endpoint (using file system for internal data)"}],default:"file"}},271:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EMAIL=void 0;const r=o(824);t.EMAIL={title:"E-mail server",description:"Configure an e-mail server to be used when users forgot their password.\n  This will add a new entry to the configuration JSON that needs to be updated with the credentials of your e-mail server.",options:r.ENABLED_DISABLED,default:r.FALSE}},104:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTTPS=void 0;const r=o(824);t.HTTPS={title:"HTTPS",description:"Determines if the server should be started for HTTP or HTTPS.\n  If HTTPS is chosen, CLI parameters <code>--httpsKey</code> and <code>--httpsCert</code> need to be provided.",options:r.ENABLED_DISABLED,default:r.FALSE}},237:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INDEX=void 0;const r=o(824);t.INDEX={title:"UI converter",description:'Convert all requests to a static page in case HTML is requested.\n  This is needed when you want to add a UI such as <a href="https://github.com/SolidOS/mashlib">Mashlib</a> or\n  <a href="https://gitlab.com/vincenttunru/penny">Penny</a>.\n  You will have to update the configuration file with the correct values.',options:r.ENABLED_DISABLED,default:r.FALSE}},629:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INITIALIZE_ROOT=void 0;const r=o(824);t.INITIALIZE_ROOT={title:"Initialize root",description:"Marks the root of the server as a storage and writes the necessary authorization resources so it can be accessed.\n  This allows everyone to edit the data on the server so make sure to update those to have the correct values.",options:r.ENABLED_DISABLED,default:r.FALSE}},987:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INTERNAL=void 0,t.INTERNAL={title:"E-mail server",description:"How the data should be stored on the server.\n  In-memory will cause the data to be lost when the server restarts.\n  SPARQL options requires the <code>--sparqlEndpoint</code> CLI parameter to be set.",options:[{key:"memory",label:"In-memory"},{key:"resource-store",label:"Same as data storage (see below)"}],default:"resource-store"}},327:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LOCKING=void 0;const r=o(824);t.LOCKING={title:"Locking",description:"Which system to use to create locks.\n  Locks are used to prevent simultaneous write operations on the same resource.\n  Disabling this can cause data corruption.\n  In-memory locking is insufficient if multiple workers threads are used.",options:[{key:"memory",label:"In-memory"},{key:"file",label:"File system"},{key:"redis",label:"Redis"},{key:r.FALSE,label:"Disabled"}],default:"file"}},551:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OWNERSHIP=void 0;const r=o(824);t.OWNERSHIP={title:"Ownership verification",description:"Verifies that someone is the owner of an external WebID if they try to register an account with it.\n  Disabling this means this server should not be trusted for authentication.",options:r.ENABLED_DISABLED,default:r.TRUE}},30:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.REGISTRATION=void 0;const r=o(824);t.REGISTRATION={title:"Registration",description:"Allow users to register new accounts and pods on the server.",options:r.ENABLED_DISABLED,default:r.TRUE}},50:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RESTRICT_ACCOUNT_API=void 0;const r=o(824);t.RESTRICT_ACCOUNT_API={title:"Restrict account API",description:"Use the chosen authorization method for the account-related APIs such as registration.\n  This will create the necessary authorization resources\n  in the <code>/.well-known/</code> and <code>/idp/</code> containers providing full access to everyone,\n  so make sure to update these with the correct values.",options:r.ENABLED_DISABLED,default:r.FALSE}},113:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SETUP=void 0;const r=o(824);t.SETUP={title:"Setup",description:"Requires a setup procedure to occur after starting the server. \n  This can be used to create a pod immediately on the server.",options:r.ENABLED_DISABLED,default:r.FALSE}},483:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SUBDOMAIN=void 0;const r=o(824);t.SUBDOMAIN={title:"Pod URLs",description:"How URLs for new pods should be created, appending the name to the base URL as a suffix, or using it as a subdomain.",options:[{key:r.FALSE,label:"Suffix (<code>https://example.com/test/</code>)"},{key:r.TRUE,label:"Subdomain (<code>https://test.example.com/</code>)"}],default:r.FALSE}},612:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WEBSOCKETS=void 0;const r=o(824);t.WEBSOCKETS={title:"WebSockets",description:"Adds support for the deprecated Solid WebSockets API 0.1.\n  This allows users to be notified when resources change, without requiring authentication.",options:r.ENABLED_DISABLED,default:r.FALSE}},297:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateConfig=t.DEFAULT_IMPORTS=t.CHOICES=t.CONTEXT=void 0;const r=o(824),i=o(150),n=o(180),s=o(271),a=o(104),l=o(237),d=o(629),u=o(987),c=o(327),p=o(551),h=o(30),m=o(50),f=o(113),E=o(483),I=o(612),b=o(285);function g(e,t,o,r){return{comment:o,"@type":"Override",overrideInstance:{"@id":e},overrideParameters:Object.assign({"@type":t},r)}}t.CONTEXT="https://linkedsoftwaredependencies.org/bundles/npm/@solid/community-server/^5.0.0/components/context.jsonld",t.CHOICES={initializeRoot:d.INITIALIZE_ROOT,setup:f.SETUP,webSockets:I.WEBSOCKETS,https:a.HTTPS,restrictAccountApi:m.RESTRICT_ACCOUNT_API,email:s.EMAIL,ownership:p.OWNERSHIP,registration:h.REGISTRATION,authorization:i.AUTHORIZATION,backend:n.BACKEND,internal:u.INTERNAL,subdomain:E.SUBDOMAIN,index:l.INDEX,locking:c.LOCKING},t.DEFAULT_IMPORTS=[(0,b.generateImport)("app","main","default"),(0,b.generateImport)("app","variables","default"),(0,b.generateImport)("http","handler","default"),(0,b.generateImport)("http","static","default"),(0,b.generateImport)("identity","handler","default"),(0,b.generateImport)("identity","pod","static"),(0,b.generateImport)("ldp","authentication","dpop-bearer"),(0,b.generateImport)("ldp","handler","default"),(0,b.generateImport)("ldp","metadata-parser","default"),(0,b.generateImport)("ldp","metadata-writer","default"),(0,b.generateImport)("ldp","modes","default"),(0,b.generateImport)("storage","middleware","default"),(0,b.generateImport)("util","logging","winston"),(0,b.generateImport)("util","representation-conversion","default"),(0,b.generateImport)("util","variables","default")],t.generateConfig=function(e){const o=function(e){const o=[...t.DEFAULT_IMPORTS];if("sparql"===e.backend&&"resource-store"===e.internal)throw new Error("SPARQL backend can not be chosen if the backend is used for internal storage.");if("regex"===e.backend&&"memory"===e.internal)throw new Error("Combining the regex backend with in-memory internal storage does not make sense.");if(e.registration===r.FALSE&&e.setup===r.FALSE&&e.initializeRoot===r.FALSE)throw new Error("There would be no way to write data to this server.");var i,n;return o.push((0,b.generateImport)("app","init",e.initializeRoot===r.TRUE?"initialize-root":"default")),o.push((0,b.generateImport)("app","setup",e.setup===r.TRUE?"required":"disabled")),o.push((0,b.generateImport)("http","middleware",e.webSockets===r.TRUE?"websockets":"no-websockets")),o.push((i=e.webSockets===r.TRUE,n=e.https===r.TRUE,i?(0,b.generateImport)("http","server-factory",n?"https-websockets":"websockets"):(0,b.generateImport)("http","server-factory",n?"https-no-websockets":"no-websockets"))),o.push((0,b.generateImport)("identity","access",e.restrictAccountApi===r.TRUE?"restricted":"public")),o.push((0,b.generateImport)("identity","email",e.email===r.TRUE?"example":"disabled")),o.push((0,b.generateImport)("identity","ownership",e.ownership===r.TRUE?"token":"unsafe-no-check")),o.push((0,b.generateImport)("identity","registration",e.registration===r.TRUE?"enabled":"disabled")),o.push((0,b.generateImport)("ldp","authorization","wac"===e.authorization?"webacl":"allow-all")),o.push((0,b.generateImport)("util","auxiliary","wac"===e.authorization?"acl":"no-acl")),o.push((0,b.generateImport)("storage","backend",e.backend)),o.push((0,b.generateImport)("storage","key-value",e.internal)),o.push((0,b.generateImport)("util","identifiers",e.subdomain===r.TRUE?"subdomain":"suffix")),o.push((0,b.generateImport)("util","index",e.index===r.TRUE?"example":"default")),o.push((0,b.generateImport)("util","resource-locker",e.locking===r.FALSE?"debug-void":e.locking)),o}(e).sort(),i=function(e){const t=[];if(e.email===r.TRUE){const e="The settings of your email server.",o={senderName:"Community Solid Server <solid@example.email>",emailConfig_host:"smtp.example.email",emailConfig_port:587,emailConfig_auth_user:"solid@example.email",emailConfig_auth_pass:"NYEaCsqV7aVStRCbmC"};t.push(g("urn:solid-server:default:EmailSender","BaseEmailSender",e,o))}if(e.index===r.TRUE){const e="An example of how the UI converter can be configured.",o={contentType:"text/html",filePath:"./node_modules/mashlib/dist/databrowser.html",options_container:!0,options_document:!1,options_minQuality:1};t.push(g("urn:solid-server:default:DefaultUiConverter","ConstantConverter",e,o))}if("regex"===e.backend){const e="Overrides the default rule to make sure internal data is stored on the file system.",o={rules:[{comment:"Stores internal data in the file system","@type":"RegexRule",regex:"^/\\.internal/",store:{"@id":"urn:solid-server:default:FileResourceStore"}},{comment:"Send everything else to the SPARQL store.","@type":"RegexRule",regex:".*",store:{"@id":"urn:solid-server:default:SparqlResourceStore"}}]};t.push(g("urn:solid-server:default:RouterRule","RegexRouterRule",e,o))}return t}(e);return{"@context":t.CONTEXT,import:o,"@graph":i}}},285:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateImport=void 0,t.generateImport=function(e,t,o){return`css:config/${e}/${t}/${o}.json`}}},t={};function o(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,o),n.exports}(()=>{const e=o(297),t=document.getElementById("form");function r(){const o=new FormData(t),r=Object.fromEntries(o),i=(0,e.generateConfig)(r);document.getElementById("text").innerText=JSON.stringify(i,null,2)}r();const i=t.getElementsByTagName("input");for(const e of i)e.addEventListener("click",r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,