(()=>{"use strict";var e={824:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ENABLED_DISABLED=t.FALSE=t.TRUE=void 0,t.TRUE="true",t.FALSE="false",t.ENABLED_DISABLED=[{value:t.TRUE,label:"Enabled"},{value:t.FALSE,label:"Disabled"}]},283:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CHOICES=void 0;const r=o(150),s=o(180),i=o(271),n=o(104),a=o(237),l=o(629),d=o(987),u=o(327),c=o(551),p=o(30),h=o(50),m=o(113),f=o(483),E=o(612);t.CHOICES=[d.INTERNAL,s.BACKEND,u.LOCKING,p.REGISTRATION,E.WEBSOCKETS,n.HTTPS,i.EMAIL,r.AUTHORIZATION,f.SUBDOMAIN,l.INITIALIZE_ROOT,m.SETUP,c.OWNERSHIP,h.RESTRICT_ACCOUNT_API,a.INDEX]},150:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AUTHORIZATION=void 0;const r=o(824);t.AUTHORIZATION={name:"authorization",title:"Authorization",description:"The authorization system to restrict who can access resources.\n  Disabling this allows everyone to access and modify all resources on the server.",options:[{value:"wac",label:"Web Access Control"},{value:r.FALSE,label:"Disabled"}],default:r.FALSE}},180:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BACKEND=void 0,t.BACKEND={name:"backend",title:"Data storage",description:"How the data should be stored on the server.\n  In-memory will cause the data to be lost when the server restarts.\n  SPARQL options requires the <code>--sparqlEndpoint</code> CLI parameter to be set.",options:[{value:"memory",label:"In-memory"},{value:"file",label:"File system"},{value:"sparql",label:"SPARQL endpoint (requires in-memory internal storage)"},{value:"pod-quota-file",label:"File system (with a pod quota)"},{value:"regex",label:"SPARQL endpoint (using file system for internal data)"}],default:"file"}},271:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EMAIL=void 0;const r=o(824);t.EMAIL={name:"email",title:"E-mail server",description:"Configure an e-mail server to be used when users forgot their password.\n  This will add a new entry to the configuration JSON that needs to be updated with the credentials of your e-mail server.",options:r.ENABLED_DISABLED,default:r.FALSE}},104:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HTTPS=void 0;const r=o(824);t.HTTPS={name:"https",title:"HTTPS",description:"Determines if the server should be started for HTTP or HTTPS.\n  If HTTPS is chosen, CLI parameters <code>--httpsKey</code> and <code>--httpsCert</code> need to be provided.",options:r.ENABLED_DISABLED,default:r.FALSE}},237:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INDEX=void 0;const r=o(824);t.INDEX={name:"index",title:"UI converter",description:'Convert all requests to a static page in case HTML is requested.\n  This is needed when you want to add a UI such as <a href="https://github.com/SolidOS/mashlib">Mashlib</a> or\n  <a href="https://gitlab.com/vincenttunru/penny">Penny</a>.\n  You will have to update the configuration file with the correct values.',options:r.ENABLED_DISABLED,default:r.FALSE}},629:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INITIALIZE_ROOT=void 0;const r=o(824);t.INITIALIZE_ROOT={name:"initializeRoot",title:"Initialize root",description:"Marks the root of the server as a storage and writes the necessary authorization resources so it can be accessed.\n  This allows everyone to edit the data on the server so make sure to update those to have the correct values.",options:r.ENABLED_DISABLED,default:r.FALSE}},987:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.INTERNAL=void 0,t.INTERNAL={name:"internal",title:"Internal storage",description:"How the data should be stored on the server.\n  In-memory will cause the data to be lost when the server restarts.\n  SPARQL options requires the <code>--sparqlEndpoint</code> CLI parameter to be set.",options:[{value:"memory",label:"In-memory"},{value:"resource-store",label:"Same as data storage (see below)"}],default:"resource-store"}},327:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LOCKING=void 0;const r=o(824);t.LOCKING={name:"locking",title:"Locking",description:"Which system to use to create locks.\n  Locks are used to prevent simultaneous write operations on the same resource.\n  Disabling this can cause data corruption.\n  In-memory locking is insufficient if multiple workers threads are used.",options:[{value:"memory",label:"In-memory"},{value:"file",label:"File system"},{value:"redis",label:"Redis"},{value:r.FALSE,label:"Disabled"}],default:"file"}},551:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OWNERSHIP=void 0;const r=o(824);t.OWNERSHIP={name:"ownership",title:"Ownership verification",description:"Verifies that someone is the owner of an external WebID if they try to register an account with it.\n  Disabling this means this server should not be trusted for authentication.",options:r.ENABLED_DISABLED,default:r.TRUE}},30:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.REGISTRATION=void 0;const r=o(824);t.REGISTRATION={name:"registration",title:"Registration",description:"Allow users to register new accounts and pods on the server.",options:r.ENABLED_DISABLED,default:r.TRUE}},50:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RESTRICT_ACCOUNT_API=void 0;const r=o(824);t.RESTRICT_ACCOUNT_API={name:"restrictAccountApi",title:"Restrict account API",description:"Use the chosen authorization method for the account-related APIs such as registration.\n  This can be used to only allow authorized requests of specific WebIDs to register accounts.\n  If enabled, the necessary authorization resources will be created\n  in the <code>/.well-known/</code> and <code>/idp/</code> containers providing full access to everyone,\n  so make sure to update these with the correct values.",options:r.ENABLED_DISABLED,default:r.FALSE}},113:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SETUP=void 0;const r=o(824);t.SETUP={name:"setup",title:"Setup",description:"Requires a setup procedure to occur after starting the server. \n  This can be used to create a pod immediately on the server.",options:r.ENABLED_DISABLED,default:r.FALSE}},483:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SUBDOMAIN=void 0;const r=o(824);t.SUBDOMAIN={name:"subdomain",title:"Pod URLs",description:"How URLs for new pods should be created, appending the name to the base URL as a suffix, or using it as a subdomain.",options:[{value:r.FALSE,label:"Suffix (<code>https://example.com/test/</code>)"},{value:r.TRUE,label:"Subdomain (<code>https://test.example.com/</code>)"}],default:r.FALSE}},612:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WEBSOCKETS=void 0;const r=o(824);t.WEBSOCKETS={name:"webSockets",title:"WebSockets",description:"Adds support for the deprecated Solid WebSockets API 0.1.\n  This allows users to be notified when resources change, without requiring authentication.",options:r.ENABLED_DISABLED,default:r.FALSE}},618:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateBody=void 0;const r=o(824);function s(e,t,o,r){return{comment:o,"@type":"Override",overrideInstance:{"@id":e},overrideParameters:Object.assign({"@type":t},r)}}t.generateBody=function(e){const t=[];if(e.email===r.TRUE){const e="The settings of your email server.",o={senderName:"Community Solid Server <solid@example.email>",emailConfig_host:"smtp.example.email",emailConfig_port:587,emailConfig_auth_user:"solid@example.email",emailConfig_auth_pass:"NYEaCsqV7aVStRCbmC"};t.push(s("urn:solid-server:default:EmailSender","BaseEmailSender",e,o))}if(e.index===r.TRUE){const e="An example of how the UI converter can be configured.",o={contentType:"text/html",filePath:"./node_modules/mashlib/dist/databrowser.html",options_container:!0,options_document:!1,options_minQuality:1};t.push(s("urn:solid-server:default:DefaultUiConverter","ConstantConverter",e,o))}if("regex"===e.backend){const e="Overrides the default rule to make sure internal data is stored on the file system.",o={rules:[{comment:"Stores internal data in the file system","@type":"RegexRule",regex:"^/\\.internal/",store:{"@id":"urn:solid-server:default:FileResourceStore"}},{comment:"Send everything else to the SPARQL store.","@type":"RegexRule",regex:".*",store:{"@id":"urn:solid-server:default:SparqlResourceStore"}}]};t.push(s("urn:solid-server:default:RouterRule","RegexRouterRule",e,o))}if("pod-quota-file"===e.backend){const e="Sets the maximum pod size to the given values.",o={limit_amount:"7000",limit_unit:"bytes"};t.push(s("urn:solid-server:default:QuotaStrategy","PodQuotaStrategy",e,o));const r="Ignores internal data when calculating size.",i={ignoreFolders:["^/\\.internal$"]};t.push(s("urn:solid-server:default:SizeReporter","FileSizeReporter",r,i))}return t}},297:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateConfig=t.CONTEXT=void 0;const r=o(283),s=o(618),i=o(711);t.CONTEXT="https://linkedsoftwaredependencies.org/bundles/npm/@solid/community-server/^5.0.0/components/context.jsonld",t.generateConfig=function(e){const o=function(e){var t;const o={};for(const s of r.CHOICES)o[s.name]=null!==(t=e[s.name])&&void 0!==t?t:s.default;return o}(e),n=(0,i.generateImports)(o).sort(),a=(0,s.generateBody)(o);return{"@context":t.CONTEXT,import:n,"@graph":a}}},711:(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.generateImports=t.DEFAULT_IMPORTS=t.generateImport=void 0;const r=o(824);function s(e,t,o){return`css:config/${e}/${t}/${o}.json`}t.generateImport=s,t.DEFAULT_IMPORTS=[s("app","main","default"),s("app","variables","default"),s("http","handler","default"),s("http","static","default"),s("identity","handler","default"),s("identity","pod","static"),s("ldp","authentication","dpop-bearer"),s("ldp","handler","default"),s("ldp","metadata-parser","default"),s("ldp","metadata-writer","default"),s("ldp","modes","default"),s("storage","middleware","default"),s("util","logging","winston"),s("util","representation-conversion","default"),s("util","variables","default")],t.generateImports=function(e){const o=[...t.DEFAULT_IMPORTS];if("sparql"===e.backend&&"resource-store"===e.internal)throw new Error("SPARQL backend can not be chosen if the backend is used for internal storage.");if("regex"===e.backend&&"memory"===e.internal)throw new Error("Combining the regex backend with in-memory internal storage does not make sense.");if(e.registration===r.FALSE&&e.setup===r.FALSE&&e.initializeRoot===r.FALSE)throw new Error("There would be no way to write data to this server.");var i,n;return o.push(s("app","init",e.initializeRoot===r.TRUE?"initialize-root":"default")),o.push(s("app","setup",e.setup===r.TRUE?"required":"disabled")),o.push(s("http","middleware",e.webSockets===r.TRUE?"websockets":"no-websockets")),o.push((i=e.webSockets===r.TRUE,n=e.https===r.TRUE,s("http","server-factory",i?n?"https-websockets":"websockets":n?"https-no-websockets":"no-websockets"))),o.push(s("identity","access",e.restrictAccountApi===r.TRUE?"restricted":"public")),o.push(s("identity","email",e.email===r.TRUE?"example":"default")),o.push(s("identity","ownership",e.ownership===r.TRUE?"token":"unsafe-no-check")),o.push(s("identity","registration",e.registration===r.TRUE?"enabled":"disabled")),o.push(s("ldp","authorization","wac"===e.authorization?"webacl":"allow-all")),o.push(s("util","auxiliary","wac"===e.authorization?"acl":"no-acl")),o.push(s("storage","backend",e.backend)),o.push(s("storage","key-value",e.internal)),o.push(s("util","identifiers",e.subdomain===r.TRUE?"subdomain":"suffix")),o.push(s("util","index",e.index===r.TRUE?"example":"default")),o.push(s("util","resource-locker",e.locking===r.FALSE?"debug-void":e.locking)),o}}},t={};function o(r){var s=t[r];if(void 0!==s)return s.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,o),i.exports}(()=>{const e=o(297),t=document.getElementById("form");function r(){const o=new FormData(t),r=Object.fromEntries(o),s=document.getElementById("text");try{const t=(0,e.generateConfig)(r);s.innerText=JSON.stringify(t,null,2)}catch(e){s.innerText=`Error: ${e.message}`}}r();const s=t.getElementsByTagName("input");for(const e of s)e.addEventListener("click",r)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,